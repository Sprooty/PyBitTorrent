import json
import requests
from torwoldTrackerdb import get_null_country_ips  # Importing from the other file
from torwoldTrackerdb import insert_enriched_ip_data  # Importing from the other file
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


def chunk_list(lst, n):
    """Yield successive n-sized chunks from lst."""
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

def update_ips_with_country():
    ips = get_null_country_ips()  # Ensure this returns a list of IP strings or dicts
    all_ip_data = []  # Initialize a list to collect all IP data

    # Chunk the IP list into batches of 100
    ip_chunks = list(chunk_list(ips, 100))

    # Specify the fields you want to return from the API
    fields = "country,countryCode,region,city,lat,lon,timezone,isp,as,org,query"

    # Use HTTP (as HTTPS is a paid option)
    endpoint = f'http://ip-api.com/batch?fields={fields}'
    headers = {'Content-Type': 'application/json'}  # Explicitly set the content type

    logging.info("Starting to update IPs with country information.")
    for chunk in ip_chunks:
        # Convert the chunk of IPs to a JSON-formatted string
        data = json.dumps(chunk)

        # Send the POST request
        response = requests.post(endpoint, data=data, headers=headers)
        
        # Check the response status code
        if response.status_code == 200:
            # Parse and add the response data to all_ip_data
            ip_data = response.json()
            all_ip_data.extend(ip_data)  # Collect all IP data
            logging.info(f"Successfully retrieved data for {len(chunk)} IPs.")
            logging.info(f"Full JSON Response: {response.text}")  # Log the full JSON response
        else:
            # Log error details
            logging.error(f"Failed to retrieve data for chunk: HTTP {response.status_code}")
            logging.error(f"Response body: {response.text}")

    logging.info("Completed updating IPs with country information.")
    return all_ip_data

def insert_api_response_into_db(ip_data):
    for item in ip_data:
        ip = item.get('query')
        if not ip:
            logging.warning("Skipping record with missing IP: %s", item)
            continue
        country = item.get('country')
        country_code = item.get('countryCode')
        region = item.get('region')
        city = item.get('city')
        latitude = item.get('lat')
        longitude = item.get('lon')
        timezone = item.get('timezone')
        isp = item.get('isp')
        as_description = item.get('as')
        org = item.get('org')

        try:
            insert_enriched_ip_data(ip, country, country_code, region, city, latitude, longitude, timezone, isp, as_description, org)
            logging.info("Inserted/Updated data for IP: %s", ip)
        except Exception as e:
            logging.error("Error inserting/updating data for IP %s: %s", ip, e)


def main():
    ip_data = update_ips_with_country()  # Retrieve the IP data
    insert_api_response_into_db(ip_data)  # Pass the IP data as an argument to the function

if __name__ == "__main__":
    main()